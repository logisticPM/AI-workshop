# agent_colab_workflow.py
"""
Colab Workflow Deep Research Agent
- Plan-Execute-Feedback-Generate
- Google search + web scraping + LLM writing
- Structured Markdown report output
"""

import os
from openai import OpenAI
from googlesearch import search
import requests
from bs4 import BeautifulSoup
from getpass import getpass
from itertools import islice

# API Key input with hidden input (no Colab check)
if not os.getenv('OPENROUTER_API_KEY') or os.getenv('OPENROUTER_API_KEY') == 'sk-...':
    print("Please enter your OpenRouter API Key (input will be hidden)")
    key = getpass("OpenRouter API Key (sk-...): ")
    os.environ['OPENROUTER_API_KEY'] = key

OPENROUTER_API_KEY = os.environ['OPENROUTER_API_KEY']
OPENROUTER_BASE_URL = 'https://openrouter.ai/api/v1'
MODEL = "anthropic/claude-sonnet-4"

def google_search(query, num_results=3):
    # Use islice to limit results for maximum compatibility
    return list(islice(search(query), num_results))

def fetch_web_content(url, max_chars=1000):
    try:
        resp = requests.get(url, timeout=10)
        soup = BeautifulSoup(resp.text, 'html.parser')
        texts = [p.get_text() for p in soup.find_all('p')]
        content = '\n'.join(texts)
        return content[:max_chars]
    except Exception as e:
        return f"[Fetch failed: {e}]"

def plan_report(topic):
    client = OpenAI(base_url=OPENROUTER_BASE_URL, api_key=OPENROUTER_API_KEY)
    prompt = f"Please plan a structured report for the following research topic and list 3-5 section titles.\n\nTopic: {topic}\n\nFormat:\n1. ...\n2. ...\n3. ..."
    completion = client.chat.completions.create(
        model=MODEL,
        messages=[{"role": "user", "content": prompt}],
        max_tokens=256,
        temperature=0.2,
    )
    lines = [line.strip() for line in completion.choices[0].message.content.splitlines() if line.strip()]
    # Only keep lines that start with a number, dash, or asterisk and are of reasonable length
    filtered = []
    for s in lines:
        s_strip = s.lstrip('-* 1234567890.„ÄÅ').strip()
        if (s.startswith('- ') or s.startswith('* ') or s[:2].isdigit() or s[:1].isdigit()) and 2 < len(s_strip) < 50:
            filtered.append(s_strip)
    return filtered

def write_section(section_title, topic):
    search_query = f"{topic} {section_title}"
    links = google_search(search_query, num_results=2)  # Limit to 2
    docs = [fetch_web_content(url) for url in links]
    context = '\n---\n'.join(docs)
    client = OpenAI(base_url=OPENROUTER_BASE_URL, api_key=OPENROUTER_API_KEY)
    prompt = f"Based on the following web content, write a structured Markdown section for '{section_title}'. Ensure information is accurate and well-organized.\n\nWeb content:\n{context}\n"
    completion = client.chat.completions.create(
        model=MODEL,
        messages=[{"role": "user", "content": prompt}],
        max_tokens=512,
        temperature=0.2,
    )
    return completion.choices[0].message.content

def assemble_report(topic, sections, section_contents):
    report = f"# {topic}\n\n"
    for title, content in zip(sections, section_contents):
        report += f"## {title}\n{content}\n\n"
    return report

if __name__ == "__main__":
    topic = input("Please enter the research topic: ").strip()
    while True:
        print("Planning report structure...")
        sections = plan_report(topic)
        print("Initial section plan:", sections)
        feedback = input("If you want to modify the section titles, enter a new comma-separated list, otherwise just press Enter: ").strip()
        if feedback:
            sections = [s.strip() for s in feedback.split(",") if s.strip()]
        print("Final sections:", sections)
        confirm = input("Enter 'y' to confirm, 'n' to replan: ").strip().lower()
        if confirm == "y":
            break
    section_contents = []
    for sec in sections:
        print(f"Writing section [{sec}] ...")
        content = write_section(sec, topic)
        section_contents.append(content)
    report = assemble_report(topic, sections, section_contents)
    print("\n=== Research Report ===\n")
    print(report) 
